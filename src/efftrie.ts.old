interface TypedTrie {
  root: TypedTrieNode;
}

interface TypedTrieNode {
  value: string;
  children: { [index: string]: TypedTrieNode } | null;
}

const numberCompareOperation = (x: number, y: number) => x - y;
const stringCompareOperation = (x: string, y: string) => x.localeCompare(y);

// returns a modified node (if modified at all)
// returns an updated value
// returns the key of the next child, or null if done
function insertFromNode(
  node: TypedTrieNode,
  value: string
): [TypedTrieNode, string, string] {
  const keys = Object.keys(node.children as {});
  keys.forEach(key => {
    // the node already exists
    if (value.startsWith(key)) {
      const [toss, remainder] = value.split(key);
      return [node, remainder, key];
    }
  });

  return [node, value, ""];
}

function insert(trie: TypedTrie, ...values: string[]): TypedTrie {
  const searchNode = trie.root;
  values.forEach(searchValue => {
    let prevNode: TypedTrieNode | null = null;
    const prevKey: string = "";
    const [node, value, key] = insertFromNode(searchNode, searchValue);
    if (prevNode) {
      prevNode;
    }
    prevNode = searchNode;
    const updatedNode = searchNode;
    const nextNode = searchNode[key];
    updatedNode[key] = node;
    searchNode = { ...searchNode, ...updatedNode };
  });
}

function remove(trie: TypedTrie, ...values: string[]): TypedTrie {
  return trie;
}

function balance(trie: TypedTrie, ...values: string[]): TypedTrie {
  return trie;
}

function height(trie: TypedTrie): number {
  return 0;
}
